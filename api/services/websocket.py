

from api.configs.logger import setup_logging
setup_logging()
import logging

from datetime import datetime, timedelta

import os
import json
import time
import logging
import asyncio
from typing import Dict, Any, Optional

from channels.generic.websocket import AsyncWebsocketConsumer
from rest_framework_simplejwt.tokens import AccessToken, TokenError


class WebSocketService(AsyncWebsocketConsumer):
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏.
    –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω Singleton –¥–ª—è –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –≤—Å–µ–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏.
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ access_token –≤ cookies.
    """

    _redis_service = None
    _clients: Dict[int, Dict[str, Any]] = {}
    _initialized = False
    _cleanup_started = False 

    def __init__(self, redis_service=None):
        super().__init__()
        if not WebSocketService._initialized and redis_service is not None:
            WebSocketService._redis_service = redis_service
            WebSocketService._initialized = True
            logging.info("WebSocketService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        self.client_id: Optional[int] = None
        self.camera_list: list = []
        self.data_task: Optional[asyncio.Task] = None
        self.is_running: bool = False

    @classmethod
    def get_redis_service(cls):
        return cls._redis_service

    async def connect(self):
        try:
            headers = dict(self.scope.get("headers", []))
            cookie_header = headers.get(b'cookie', b'').decode('utf-8')
            access_token = self.get_cookie_value(cookie_header, 'access_token')

            if not access_token or not self.authenticate_token(access_token):
                logging.warning(f"WebSocket-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")
                await self.send(json.dumps({"error": "403 Forbidden: Invalid token"}))
                await self.close(code=403)
                return

            self.client_id = id(self)
            WebSocketService._clients[self.client_id] = {
                'connection': self,
                'camera_list': [],
                'is_active': True,
                'last_ping': datetime.utcnow()
            }

            await self.accept()
            logging.info(f"–ù–æ–≤–æ–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (ID: {self.client_id}). "
                         f"–í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {len(WebSocketService._clients)}")

            # üßπ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏
            if not WebSocketService._cleanup_started:
                asyncio.create_task(self._cleanup_inactive_clients())
                WebSocketService._cleanup_started = True

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")
            await self.close()

    def get_cookie_value(self, cookie_header, cookie_name):
        cookies = dict(item.split("=", 1) for item in cookie_header.split("; ") if "=" in item)
        return cookies.get(cookie_name)

    def authenticate_token(self, token):
        try:
            AccessToken(token)
            return True
        except TokenError:
            logging.warning("–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫")
            return False
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return False

    async def disconnect(self, close_code):
        try:
            if self.client_id in WebSocketService._clients:
                self.is_running = False
                if self.data_task:
                    self.data_task.cancel()
                    try:
                        await self.data_task
                    except asyncio.CancelledError:
                        pass
                del WebSocketService._clients[self.client_id]
                logging.info(f"WebSocket –æ—Ç–∫–ª—é—á–µ–Ω (ID: {self.client_id}). "
                             f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {len(WebSocketService._clients)}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {self.client_id}: {e}")

    async def receive(self, text_data):
        try:
            data = json.loads(text_data)

            # üîÑ –ï—Å–ª–∏ —ç—Ç–æ ping ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º last_ping –∏ –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–ª–∞–µ–º
            if data.get("type") == "ping":
                WebSocketService._clients[self.client_id]['last_ping'] = datetime.utcnow()
                return

            # üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏–Ω–≥–∞
            WebSocketService._clients[self.client_id]['last_ping'] = datetime.utcnow()

            # üîÅ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä
            self.camera_list = data.get("camera_list", [])
            WebSocketService._clients[self.client_id]['camera_list'] = self.camera_list

            logging.info(f"üì© –ö–ª–∏–µ–Ω—Ç {self.client_id} –æ–±–Ω–æ–≤–∏–ª —Å–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä: {self.camera_list}")

            # üö´ –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ, –µ—Å–ª–∏ —Ç–∞—Å–∫ —É–∂–µ –µ—Å—Ç—å
            if self.data_task and not self.data_task.done():
                self.is_running = False
                self.data_task.cancel()
                try:
                    await self.data_task
                except asyncio.CancelledError:
                    pass

            self.is_running = True
            self.data_task = asyncio.create_task(self._get_and_send_data())

        except json.JSONDecodeError:
            logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {text_data}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def _get_and_send_data(self):
        if not WebSocketService._redis_service:
            logging.error("Redis —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return

        interval = float(os.getenv('GET_DATA_FROM_REDIS_TO_SOCKET_SLEEP_TIME', 0.1))
        logging.info(f"–ó–∞–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {self.client_id}, –∫–∞–º–µ—Ä—ã: {self.camera_list}")

        while self.is_running:
            try:
                if not self.camera_list:
                    await asyncio.sleep(interval)
                    continue

                data = {}
                for camera_id in self.camera_list:
                    redis_data = WebSocketService._redis_service.get_data(camera_id)
                    if redis_data:
                        key = next(iter(redis_data))
                        data.update(redis_data[key])

                if data:
                    await self._send_data(data)

                await asyncio.sleep(interval)

            except asyncio.CancelledError:
                logging.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {self.client_id}")
                break
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è/–æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {self.client_id}: {e}")
                self.is_running = False
                break

    async def _send_data(self, data: dict):
        try:
            await self.send(text_data=json.dumps({"data": data}))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—É {self.client_id}: {e}")
            raise

    async def _cleanup_inactive_clients(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤."""
        timeout = timedelta(seconds=30)
        check_interval = 5

        while True:
            now = datetime.utcnow()
            to_remove = []

            for client_id, info in list(WebSocketService._clients.items()):
                last_ping = info.get('last_ping', now)
                if now - last_ping > timeout:
                    to_remove.append(client_id)

            for client_id in to_remove:
                connection = WebSocketService._clients[client_id]['connection']
                try:
                    await connection.close(code=4001)
                except Exception as e:
                    logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {e}")
                del WebSocketService._clients[client_id]
                logging.info(f"–£–¥–∞–ª—ë–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π WebSocket-–∫–ª–∏–µ–Ω—Ç (ID: {client_id})")

            await asyncio.sleep(check_interval)

